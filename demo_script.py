# -*- coding: utf-8 -*-
"""perceptron.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vBkRx3zcZqLB5_Zuq6uHAsPLXGc655Hl
"""

"""
demo_script.py

Script demonstrating the usage of LinearRegressionCustom on Ames Housing dataset.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from linear_regression_custom import LinearRegressionCustom, lin_regplot

def main():
    # Load dataset with selected columns
    columns = ['Overall Qual', 'Overall Cond', 'Gr Liv Area', 'Central Air', 'Total Bsmt SF', 'SalePrice']
    df = pd.read_csv('http://jse.amstat.org/v19n3/decock/AmesHousing.txt', sep='\t', usecols=columns)

    # Extract feature and target
    X = df[['Gr Liv Area']].values
    y = df['SalePrice'].values

    # Standardize data
    sc_x = StandardScaler()
    sc_y = StandardScaler()
    X_std = sc_x.fit_transform(X)
    y_std = sc_y.fit_transform(y[:, np.newaxis]).flatten()

    # Initialize and train custom model
    lr = LinearRegressionCustom(n_iter=40, learning_rate=0.1, C=1000, penalty='l2', early_stopping=5)
    lr.fit(X_std, y_std)

    print(f"Custom model parameters: weights = {lr.w_}, bias = {lr.b_}")
    print(f"Final training loss (MSE): {lr.losses_[-1]:.4f}")

    # Plot training loss
    plt.figure(figsize=(6,3))
    plt.plot(lr.losses_, label='Training Loss (MSE)')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.title('Training Loss Over Epochs')
    plt.legend()
    plt.show()

    # Plot regression line
    plt.figure(figsize=(6,4))
    lin_regplot(X_std, y_std, lr)
    plt.show()

    # Compare with scikit-learn model
    sklr = LinearRegression()
    sklr.fit(X, y)

    house_area = np.array([[2500]])
    house_area_std = sc_x.transform(house_area)
    price_std_pred = lr.predict(house_area_std)
    price_pred = sc_y.inverse_transform(price_std_pred.reshape(-1,1))

    sk_price_pred = sklr.predict(house_area)

    print(f"Custom model predicted sale price for 2500 sqft: ${price_pred.flatten()[0]:,.2f}")
    print(f"Sklearn model predicted sale price for 2500 sqft: ${sk_price_pred[0]:,.2f}")

if __name__ == "__main__":
    main()